@model PaginatedList<Alfa_1.Models.Report>

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

@*<p>
    <a asp-action="Create">Create New</a>
</p>*@


<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> 
        </p>
    </div>
</form>
@*<hr />*@
<table class="table">
    <thead>
        <tr>
            <th>
                Email
            </th>
                <th>
                    Name
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["CompleteSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Completed</a>
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Created</a>
                </th>
                <th>
                    Latitude
                </th>
                <th>
                    Longitude
                </th>
                <th>
                   Category
                </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.User.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            @*<td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>*@
            @*<td>
                @Html.DisplayFor(modelItem => item.Img)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.IsComplete)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Created)
            </td>
            @*<td>
                @Html.DisplayFor(modelItem => item.Close)
            </td>*@
            <td>
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}




<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>




@*<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>*@


<hr>






@*<div id="map" style="width:100%;height:486px;"></div>
    <script>

         function initMap() {

             var map = new google.maps.Map(document.getElementById('map'), {
                 zoom: 3,
                 center: { lat: -28.024, lng: 140.887 }
             });

             // Create an array of alphabetical characters used to label the markers.
             var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

             // Add some markers to the map.
             // Note: The code uses the JavaScript Array.prototype.map() method to
             // create an array of markers based on a given "locations" array.
             // The map() method here has nothing to do with the Google Maps API.
             var markers = locations.map(function (location, i) {
                 return new google.maps.Marker({
                     position: location,
                     label: labels[i % labels.length]
                 });
             });

             // Add a marker clusterer to manage the markers.
             var markerCluster = new MarkerClusterer(map, markers,
                 { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });
         }
        var locations = @{ 

            var json = await httpClient.GetStringAsync("url");

        }

                 //   [
         //    { lat: -31.563910, lng: 147.154312 },
         //    { lat: -33.718234, lng: 150.363181 },
         //    { lat: -33.727111, lng: 150.371124 },
         //    { lat: -33.848588, lng: 151.209834 },
         //    { lat: -33.851702, lng: 151.216968 },
         //    { lat: -34.671264, lng: 150.863657 },
         //    { lat: -35.304724, lng: 148.662905 },
         //    { lat: -36.817685, lng: 175.699196 },
         //    { lat: -36.828611, lng: 175.790222 },
         //    { lat: -37.750000, lng: 145.116667 },
         //    { lat: -37.759859, lng: 145.128708 },
         //    { lat: -37.765015, lng: 145.133858 },
         //    { lat: -37.770104, lng: 145.143299 },
         //    { lat: -37.773700, lng: 145.145187 },
         //    { lat: -37.774785, lng: 145.137978 },
         //    { lat: -37.819616, lng: 144.968119 },
         //    { lat: -38.330766, lng: 144.695692 },
         //    { lat: -39.927193, lng: 175.053218 },
         //    { lat: -41.330162, lng: 174.865694 },
         //    { lat: -42.734358, lng: 147.439506 },
         //    { lat: -42.734358, lng: 147.501315 },
         //    { lat: -42.735258, lng: 147.438000 },
         //    { lat: -43.999792, lng: 170.463352 }
         //]


     </script>
     <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js">
     </script>
     <script async defer
             src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDuXDIR1wDy_UWnhjnV-Zom9DNze4v-VpI&callback=initMap">
     </script>*@


<style type="text/css">
        html {
            height: 100%
        }

        body {
            height: 100%;
            margin: 0;
            padding: 0
        }

        #map_canvas {
            height: 100%
        }
    </style>
    <script type="text/javascript"
            src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDuXDIR1wDy_UWnhjnV-Zom9DNze4v-VpI&sensor=true">
    </script>

          </script>
         <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js">
         </script>

    <script type="text/javascript">
        var map;
        function initialize() {
            var mapOptions = {
                center: new google.maps.LatLng(40, -7),
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("map_canvas"),
                mapOptions);
           
        }

    </script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-latest.min.js"></script>


    <body onload="initialize()">
        <div id="map_canvas" style="width:100%; height:500px" onload="initialize()"></div>
        <script type="text/javascript">
            $(document).ready(function () {
                $.getJSON("/api/report_old", function (json1) {
                    $.each(json1, function (key, data) {
                        var latLng = new google.maps.LatLng(data.latitude, data.longitude);
                        // Creating a marker and putting it on the map
                        var marker = new google.maps.Marker({
                            position: latLng,
                            title: data.title
                        });
                        marker.setMap(map);
                    });
                });
            });
            // Add a marker clusterer to manage the markers.
   
        </script>
    </body>